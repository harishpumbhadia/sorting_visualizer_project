{"version":3,"sources":["reportWebVitals.js","Reducers/isRunning/index.js","Reducers/sortingAlgorithm/index.js","Algorithm/BubbleSort.js","Algorithm/QuickSort.js","Algorithm/MergeSort.js","Algorithm/HeapSort.js","SortingVisualizer/SortingVIsualizer.jsx","SortingVisualizer/SortingVIsualizer.js","Reducers/index.js","store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","setRunning","createAction","isRunning","handleActions","SET_RUNNING","state","payload","setAlgorithm","sortingAlgorithm","SET_ALGORITHM","animation","quickSort","array","quickSortHelperFunction","length","startId","endId","pivotId","leftId","rightId","push","swap","i","j","temp","mergeSort","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","heapSort","currentId","shiftDown","buildMaxHeap","heap","childOneId","childTwoId","idToSwap","ARRAY_ANIMATION_SPEED","ARRAY_COLOR_BEFORE_SORTING","ARRAY_COLOR_AFTER_SORTING","ARRAY_COLOR_WHILE_SORTING","randomIntFromInterval","min","max","random","SortingVIsualizer","props","isclicked","width_value","color","this","onLoadArray","updateAlgorithm","cursor","className","style","onClick","randonNumberGenerator","bind","class","type","id","background","disabled","value","onChange","handleChange","handleClick","bubbleSort","map","height","backgroundColor","width","document","getElementById","event","setState","target","doubleMultipler","index","sortingButton","Array","isSorted","counter","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","barOneNewHeight","barTwoNewHeight","disableIsRunning","pivotBar","leftBar","rightBar","pivotBarStyle","leftBarStyle","rightBarStyle","leftBarNewHeight","rightBarNewHeight","colorChange","count","childOne","childTwo","currentIdStyle","childOneStyle","childTwoStyle","arraySize","Component","connect","dispatch","combineReducers","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store"],"mappings":"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","file":"static/js/main.58cd0292.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createAction, handleActions } from \"redux-actions\";\r\n\r\nconst initialState = false;\r\n\r\nexport const SET_RUNNING = \"SET_RUNNING\";\r\nexport const setRunning = createAction(SET_RUNNING);\r\n\r\nexport const isRunning = handleActions({\r\n  SET_RUNNING: (state, { payload }) => {\r\n    return payload;\r\n  },\r\n}, initialState);","\r\nimport { createAction, handleActions } from \"redux-actions\";\r\n\r\nconst initialState = \"\";\r\n\r\nexport const SET_ALGORITHM = \"SET_ALGORITHM\";\r\nexport const setAlgorithm = createAction(SET_ALGORITHM);\r\n\r\nexport const sortingAlgorithm = handleActions({\r\n  SET_ALGORITHM: (state, { payload }) => {\r\n    return payload;\r\n  },\r\n}, initialState);","var animation = [];\r\nexport function bubbleSort(Array) {\r\n    animation = [];\r\n    let isSorted = false;\r\n    let counter = 0;\r\n    if (Array.length === 1) return Array;\r\n    while (!isSorted) {\r\n        isSorted = true;\r\n        for (let i = 0; i < Array.length - 1 - counter; i++) {\r\n            //comparing 2 values\r\n            animation.push([i, i + 1]);\r\n            \r\n            //push them to change the color\r\n         \r\n            if (Array[i] > Array[i + 1]) {\r\n                let temp = Array[i + 1];\r\n                Array[i + 1] = Array[i];\r\n                Array[i] = temp;\r\n                isSorted = false;\r\n                animation.push([i, Array[i],i + 1, Array[i+1]]);\r\n               \r\n            }\r\n            else\r\n                animation.push([i, Array[i],i + 1, Array[i+1]]);\r\n        }\r\n        counter++;\r\n    }\r\n    return animation;\r\n};\r\n","var animation = [];\r\nexport function quickSort(array) {\r\n  animation = [];\r\n    quickSortHelperFunction(array,0,array.length-1);\r\n    return animation;\r\n  }\r\n  \r\n  function quickSortHelperFunction(array,startId, endId){\r\n      if(startId >= endId) return;\r\n      const pivotId = startId;\r\n      let leftId = startId+1;\r\n      let rightId = endId;\r\n      \r\n      while (rightId >= leftId) {\r\n        animation.push([pivotId,leftId,rightId]);\r\n          if (array[leftId] > array[pivotId] && array[rightId] < array[pivotId]) {\r\n              animation.push([leftId, array[rightId], rightId, array[leftId]]);\r\n              swap(leftId, rightId, array);\r\n          } else\r\n              animation.push([leftId,array[leftId],rightId,array[rightId]]);\r\n          if (array[leftId] <= array[pivotId]) {\r\n              leftId++;\r\n            // animation.push([leftId++]);\r\n          }//else\r\n            //animation.push([leftId]);\r\n          if (array[rightId] >= array[pivotId]) {\r\n              rightId--;\r\n             // animation.push([rightId--]);\r\n          } //else\r\n             // animation.push([rightId]);\r\n      }\r\n      swap(pivotId, rightId, array);\r\n      animation.push([pivotId, array[pivotId], rightId, array[rightId]]);\r\n      const leftSubarray = rightId -1-startId< endId -(rightId +1);\r\n      if(leftSubarray){\r\n        quickSortHelperFunction(array,startId,rightId-1);\r\n        quickSortHelperFunction(array,rightId+1,endId);\r\n      }\r\n      else{\r\n        quickSortHelperFunction(array,rightId+1,endId);\r\n        quickSortHelperFunction(array,startId,rightId-1);\r\n      }\r\n  }\r\n  \r\n  function swap(i,j,array){\r\n      let temp = array[j];\r\n      array[j] = array[i];\r\n      array[i] = temp;\r\n  }\r\n  ","export function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","var animation = [];\r\nexport function heapSort(array) {\r\n    // Write your code here.\r\n    animation = [];\r\n    buildMaxHeap(array);\r\n    for (let endId = array.length - 1; endId > 0; endId--){\r\n        animation.push([0, array[endId], endId, array[0]]);\r\n          swap(0,endId,array);\r\n          shiftDown(0,endId-1,array);\r\n      }\r\n      return animation;\r\n  }\r\n  \r\n  function buildMaxHeap(array){\r\n      const firstParentId = Math.floor((array.length - 2)/2);\r\n      for(let currentId = firstParentId; currentId >=0; currentId--){\r\n          shiftDown(currentId, array.length -1, array);\r\n      }\r\n  }\r\n  \r\n  function shiftDown(currentId,endId,heap){\r\n      let childOneId = currentId * 2 + 1;\r\n      while(childOneId <= endId){\r\n          const childTwoId = currentId * 2 + 2 <= endId ? currentId * 2 + 2 : -1;\r\n          let idToSwap;\r\n          if (childTwoId !== -1 && heap[childTwoId] > heap[childOneId]) {\r\n            animation.push([currentId,childOneId, childTwoId]);\r\n              idToSwap = childTwoId;\r\n          } else {\r\n             if(childTwoId !== -1)\r\n                animation.push([currentId,childOneId, childTwoId]);\r\n            idToSwap = childOneId;\r\n          }\r\n          if (childTwoId !== -1) {\r\n              animation.push([currentId, childOneId, childTwoId]);\r\n          }\r\n          //animation.push([idToSwap, currentId]);\r\n          if (heap[idToSwap] > heap[currentId]) {\r\n              animation.push([currentId,heap[idToSwap] , idToSwap,heap[currentId]]);\r\n              swap(currentId, idToSwap, heap);\r\n              currentId = idToSwap;\r\n              childOneId = currentId * 2 + 1;\r\n          } else {\r\n            animation.push([currentId, heap[currentId], idToSwap,heap[idToSwap]]);\r\n             return;\r\n          }\r\n      }\r\n  }\r\n  \r\n  function swap(i,j, array){\r\n      const temp = array[j];\r\n      array[j]  =array[i];\r\n      array[i] = temp;\r\n  }\r\n","import React, { Component } from 'react';\r\nimport * as bubbleSort from '../Algorithm/BubbleSort.js'\r\nimport * as quickSort from '../Algorithm/QuickSort.js';\r\nimport * as mergeSort from '../Algorithm/MergeSort';\r\nimport * as heapSort from '../Algorithm/HeapSort';\r\n\r\nconst ARRAY_ANIMATION_SPEED = 20;\r\nconst TOTAL_BARS = 185;\r\nconst MIN_TOTAL_BARS = 15;\r\nconst ARRAY_COLOR_BEFORE_SORTING = 'rgb(99, 223, 210)';\r\nconst ARRAY_COLOR_AFTER_SORTING = 'rgb(149, 233, 142)';\r\nconst ARRAY_COLOR_WHILE_SORTING = 'rgb(172, 38, 15)';\r\n\r\nclass SortingVIsualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // Must initialize state first\r\n        this.state = {\r\n            isclicked:false,\r\n            array: []  ,\r\n            width_value: \"\",\r\n            color: \"\",\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.onLoadArray();\r\n    }\r\n    handleClick(sortingAlgorithm) {\r\n        const { updateAlgorithm } = this.props;\r\n        updateAlgorithm(sortingAlgorithm)    \r\n        \r\n    }\r\n    \r\n    render() { \r\n        const  array = this.state.array;\r\n         const {\r\n            isRunning,\r\n            sortingAlgorithm,\r\n        } = this.props;\r\n\r\n        const cursor = isRunning ? \"auto\" : \"pointer\";\r\n        const color = isRunning ? \"rgba(214, 29, 29, 0.8)\" : \"white\";\r\n        return (\r\n            <>\r\n                <div className = \"navBar\">\r\n                \r\n                        <li><button\r\n                             style={{color: color, cursor: cursor}}\r\n                            className=\"generateNewArrayButton\"\r\n                            onClick={!isRunning ? this.randonNumberGenerator.bind(this) : null}>Generate new Array</button></li>\r\n                        <li style={{color: color}}class=\"text\">Change array size</li>\r\n                        \r\n                        <li>\r\n                            <input type=\"range\" min=\"1\" max=\"100\" id=\"ArrayRange\" className=\"slider\"\r\n                                style={{background: color, cursor: cursor}}\r\n                                disabled={isRunning}\r\n                                value={ this.state.value}   \r\n                                onChange={this.handleChange.bind(this)}    \r\n                            />\r\n                        </li> \r\n                    <button\r\n                        className={sortingAlgorithm === \"quickSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () =>this.handleClick(\"quickSort\"):null}>\r\n                        Quick Sort\r\n                    </button>\r\n                    \r\n                    <button\r\n                        className={sortingAlgorithm === \"mergeSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () => this.handleClick(\"mergeSort\"):null}>\r\n                        Merge Sort\r\n                    </button>\r\n                    <button\r\n                        className={sortingAlgorithm === \"bubbleSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () => this.handleClick(\"bubbleSort\"):null}>\r\n                        Bubble Sort\r\n                    </button>\r\n                    <button\r\n                        className={sortingAlgorithm === \"heapSort\" ? \"currentAlgorithmButton\" : \"algorithmButton\"}\r\n                        onClick={!isRunning ? () => this.handleClick(\"heapSort\"):null}>\r\n                            Heap Sort\r\n                    </button>\r\n                        {\r\n                           \r\n                           sortingAlgorithm ?\r\n                                <button\r\n                                id=\"sort\"\r\n                               // disabled={ this.state.isclicked}\r\n                                    //stle={{color: color, cursor: cursor}}\r\n                                    className='algorithmButton'\r\n                                     onClick={sortingAlgorithm === 'bubbleSort' ? this.bubbleSort.bind(this) : sortingAlgorithm ==='quickSort'? this.quickSort.bind(this):sortingAlgorithm === 'heapSort' ? this.heapSort.bind(this): sortingAlgorithm === 'mergeSort'? this.mergeSort.bind(this): null}\r\n                                   // onclick={ this.bubbleSort.bind(this)}\r\n                                >\r\n                                Sort!\r\n                                     \r\n                    </button>\r\n                                : null\r\n                       }\r\n                </div>\r\n                <div class=\"Array-container\">   \r\n                    {\r\n                        array.map((value, id) => (\r\n                        <div class=\"Array-bar\"\r\n                            key={id}\r\n                            style={{\r\n                                height: `${value}px`,\r\n                                backgroundColor: `${this.state.color}`,\r\n                                width: `${this.state.width_value}px`\r\n                            }}\r\n                            \r\n                        >\r\n                        </div>\r\n                    ))}    \r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    handleCurrentAlgorithm() {\r\n        const currentAlgorithm = document.getElementById('currentAlgorithm').value;\r\n        if (currentAlgorithm === 'merge sort') {\r\n            this.mergeSort();\r\n        }\r\n    }\r\n    \r\n    \r\n    handleChange(event) {\r\n        const array = [];\r\n        const color = ARRAY_COLOR_BEFORE_SORTING;\r\n        this.setState({ color });\r\n\r\n        if (event.target.value >= 0 && event.target.value <= 10)\r\n            this.state.width_value = 30;\r\n        else if (event.target.value > 10 && event.target.value <= 20)\r\n            this.state.width_value = 22;\r\n        else if (event.target.value > 20 && event.target.value <= 30)\r\n            this.state.width_value = 17;\r\n        else if (event.target.value > 30 && event.target.value <= 40)\r\n            this.state.width_value = 12;\r\n        else if (event.target.value > 40 && event.target.value <= 50)\r\n            this.state.width_value = 9;\r\n        else if (event.target.value > 50 && event.target.value <= 60)\r\n            this.state.width_value = 7;\r\n        else if (event.target.value > 60 && event.target.value <= 70)\r\n            this.state.width_value = 5;\r\n        else if (event.target.value > 70 && event.target.value <= 80)\r\n            this.state.width_value = 4;\r\n        else \r\n            this.state.width_value = 3;\r\n   \r\n        \r\n        const doubleMultipler = event.target.value * 2;\r\n        for (let index = 0; index < doubleMultipler; index++) {\r\n            if (doubleMultipler < TOTAL_BARS) {\r\n                if (doubleMultipler < MIN_TOTAL_BARS) {\r\n                    this.state.width_value = 30;\r\n                    this.setState({ array });\r\n                    return this.randonNumberGenerator(MIN_TOTAL_BARS)\r\n                }\r\n                else\r\n                    array.push(randomIntFromInterval(5, 500));\r\n            }\r\n            else {\r\n                this.state.width_value = 3;\r\n                this.setState({ array });\r\n                return this.randonNumberGenerator(TOTAL_BARS)\r\n            }\r\n        }\r\n        this.setState({ array });\r\n    }\r\n    \r\n   \r\n\r\n    //main bubble sort method\r\n    bubbleSort() { \r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        const animation = bubbleSort.bubbleSort(this.state.array);\r\n       const arrayBars = document.getElementsByClassName('Array-bar');\r\n        for (let i = 0; i < animation.length; i++) {\r\n            const isColorChange = i % 2 !== 1;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animation[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    barTwoStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, barOneNewHeight,barTwoIdx,barTwoNewHeight ] = animation[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                    barOneStyle.height = `${barOneNewHeight}px`;\r\n                    barTwoStyle.height = `${barTwoNewHeight}px`;\r\n                    barOneStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    barTwoStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    \r\n                 },i* ARRAY_ANIMATION_SPEED );\r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }     \r\n    }\r\n\r\n\r\n    //quick sort method starts\r\n    quickSort() {\r\n        const animation = quickSort.quickSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('Array-bar');\r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        for (let i = 0; i < animation.length; i++){\r\n            const arrayElementSize = animation[i].length;\r\n            if (arrayElementSize === 3) {\r\n                const [pivotBar, leftBar, rightBar] = animation[i];\r\n                const pivotBarStyle = arrayBars[pivotBar].style;\r\n                const leftBarStyle = arrayBars[leftBar].style;\r\n                const rightBarStyle = arrayBars[rightBar].style;\r\n                setTimeout(() => {\r\n                    pivotBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n           \r\n            else {\r\n                setTimeout(() => {\r\n                    const [leftBar, leftBarNewHeight, rightBar, rightBarNewHeight] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\r\n                    rightBarStyle.height = `${rightBarNewHeight}px`;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);    \r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }\r\n    }//quick sort methods ends here.\r\n    //Merge sort method starts from here\r\n    mergeSort() {\r\n        const animation = mergeSort.mergeSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('Array-bar');\r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        for (let i = 0; i < animation.length;i++){\r\n            const colorChange = i % 3 ;\r\n            if (colorChange === 0) {\r\n                setTimeout(() => {\r\n                    const [leftBar, rightBar] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);   \r\n            }\r\n            if (colorChange === 1) {\r\n                setTimeout(() => {\r\n                    const [leftBar, rightBar] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    rightBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);   \r\n            }\r\n            if (colorChange === 2)  {\r\n                setTimeout(() => {\r\n                    const [leftBar, leftBarNewHeight] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\r\n                    leftBarStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }, i * ARRAY_ANIMATION_SPEED);    \r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }\r\n    }\r\n\r\n    // heap sort method starts\r\n    heapSort() {\r\n        const animation = heapSort.heapSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('Array-bar');\r\n        const sortingButton = document.getElementById('sort');\r\n        sortingButton.disabled = true;\r\n        sortingButton.className = 'disableButton';\r\n        let count = 0;\r\n        for (let i = 0; i < animation.length; i++){\r\n            if (animation[i].length === 3) {\r\n                setTimeout(() => {\r\n                count = count + 1;\r\n                if (count % 2 === 1) {\r\n                   const [currentId, childOne, childTwo] = animation[i];\r\n                    const currentIdStyle = arrayBars[currentId].style;\r\n                    const childOneStyle = arrayBars[childOne].style;\r\n                    const childTwoStyle = arrayBars[childTwo].style;\r\n                    currentIdStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    childOneStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                    childTwoStyle.backgroundColor = ARRAY_COLOR_WHILE_SORTING;\r\n                } else {\r\n                    const [currentId, childOne, childTwo] = animation[i];\r\n                    const currentIdStyle = arrayBars[currentId].style;\r\n                    const childOneStyle = arrayBars[childOne].style;\r\n                    const childTwoStyle = arrayBars[childTwo].style;\r\n                    currentIdStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    childOneStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                    childTwoStyle.backgroundColor = ARRAY_COLOR_BEFORE_SORTING;\r\n                }\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const [leftBar, leftBarNewHeight, rightBar, rightBarNewHeight] = animation[i];\r\n                    const leftBarStyle = arrayBars[leftBar].style;\r\n                    const rightBarStyle = arrayBars[rightBar].style;\r\n                    leftBarStyle.height = `${leftBarNewHeight}px`;\r\n                    rightBarStyle.height = `${rightBarNewHeight}px`;\r\n                    \r\n                }, i * ARRAY_ANIMATION_SPEED);   \r\n            }\r\n            if (i >= animation.length - 1) {\r\n                setTimeout(() => {\r\n                    this.setState({ color: ARRAY_COLOR_AFTER_SORTING });\r\n                    const { disableIsRunning } = this.props;\r\n                    disableIsRunning()\r\n                    sortingButton.disabled = false;\r\n                    sortingButton.className = 'algorithmButton'\r\n                }, i * ARRAY_ANIMATION_SPEED);\r\n            }\r\n        }\r\n    }\r\n    // random generator method will push 185 random numbers  to  array \r\n    // this method calls randomIntFromInterval method that originally generate random number between the range of 5 to 500 that can fit in the screen \r\n    randonNumberGenerator(arraySize) {\r\n        const array = [];\r\n        const width = this.state.width_value;\r\n        const color = ARRAY_COLOR_BEFORE_SORTING;\r\n        if (arraySize === 185 || arraySize === 15 ) {\r\n            for (let index = 0; index < arraySize; index++) {\r\n                array.push(randomIntFromInterval(5, 500));\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this.state.array.length; index++) {\r\n                array.push(randomIntFromInterval(5, 500));\r\n            }\r\n        }\r\n        this.setState({ array });\r\n        this.setState({ width });\r\n        this.setState({ color });\r\n        \r\n        \r\n    }\r\n\r\n    onLoadArray() {\r\n        const array = [];\r\n        this.state.width_value = 8;    \r\n        for (let index = 0; index < 100; index++) \r\n            array.push(randomIntFromInterval(5,500));\r\n        this.setState({ array }); \r\n    }\r\n\r\n}  \r\n// Stack overflow\r\nfunction randomIntFromInterval(min, max) { // min and max included \r\n    //this.state.width = width;\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default SortingVIsualizer; ","import { connect } from \"react-redux\";\r\nimport { setRunning } from '../Reducers/isRunning'\r\nimport { setAlgorithm } from '../Reducers/sortingAlgorithm'\r\nimport SortingVIsualizer from \"./SortingVIsualizer.jsx\";\r\n\r\nconst mapStateToProps = ({\r\n    isRunning,\r\n    sortingAlgorithm,\r\n}) => ({\r\n    isRunning,\r\n    sortingAlgorithm\r\n});\r\n\r\nconst mapDispatchToProps = () => dispatch => ({\r\n    updateAlgorithm: (sortingAlgorithm) => {\r\n        dispatch(setAlgorithm(sortingAlgorithm));\r\n        dispatch(setRunning(true))  \r\n    },\r\n   \r\n    disableIsRunning: () => {\r\n        dispatch(setRunning(false));\r\n    },\r\n    \r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SortingVIsualizer);\r\n","import { combineReducers } from \"redux\";\r\nimport { isRunning } from './isRunning';\r\nimport { sortingAlgorithm } from './sortingAlgorithm'\r\n\r\n\r\nexport default combineReducers({\r\n    isRunning,\r\n    sortingAlgorithm,\r\n});\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./Reducers\";\r\n\r\nexport default createStore(rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SortingVIsualizer from \"./SortingVisualizer/SortingVIsualizer.js\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render\n(\n  <Provider store={store}>\n  <SortingVIsualizer />\n</Provider>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}